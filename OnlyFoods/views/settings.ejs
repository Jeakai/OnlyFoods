<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Account Settings - OnlyFoods</title>
    <link rel="stylesheet" href="/styles/settings.css" />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
      integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
  </head>
  <body>
  <div class="sidebar">
    <a href="/main" style="text-decoration: none; color: inherit">
        <h2 class="logo">
        <span class="logo-o">O</span><span class="logo-nly">nly</span><span class="logo-foods">Foods</span>
        </h2>
    </a>
    <a href="#" class="sidebar-btn add-btn" id="addPostBtn">
        <i class="fa-solid fa-plus"></i>
        <span>Add</span>
    </a>
    <a href="/main" class="sidebar-btn" id="searchBarToggle">
      <i class="fa-solid fa-magnifying-glass"></i>
      <span>Search</span>
    </a>
    <a href="/notifications" class="sidebar-btn">
        <i class="fa-solid fa-bell"></i>
        <span>Notifications</span>
    </a>
    <a href="/profile" class="sidebar-btn">
        <i class="fa-solid fa-user"></i>
        <span>Profile</span>
    </a>
    <a href="/settings" class="sidebar-btn">
        <i class="fa-solid fa-gear"></i>
        <span>Settings</span>
    </a>
    <a href="/logout" class="sidebar-btn" onclick="return confirmLogout(event)">
      <i class="fa-solid fa-right-from-bracket"></i>
      <span>Logout</span>
    </a>
  </div>

    <div class="main-content">
      <h1>Account Settings</h1>

      <div class="setting-item">
        <label for="email">Current Email</label>
        <input type="text" id="email" value="<%= email %>" readonly />
        <button id="changeEmailBtn">Change Email</button>
      </div>

      <div class="setting-item">
        <label for="password">Password</label>
        <input type="password" id="password" value="********" readonly />
        <button id="changePasswordBtn">Change Password</button>
      </div>

      <div class="setting-item delete-account">
        <h3>Delete Your Account</h3>
        <p>This action is irreversible. Please proceed with caution.</p>
        <button id="deleteAccountBtn" class="danger-btn">Delete Account</button>
      </div>
    </div>
    </div>

    <!-- Change Email Modal -->
    <div id="changeEmailModal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Change Email</h2>
        <form
          id="changeEmailForm"
          action="/settings/update-email"
          method="POST"
        >
          <label for="currentPasswordEmail">Current Password</label>
          <input type="password" id="currentPasswordEmail" required />

          <label for="newEmail">New Email</label>
          <input type="text" id="newEmail" required />

          <button type="submit">Confirm Change</button>
        </form>
      </div>
    </div>

    <!-- Change Password Modal -->
    <div id="changePasswordModal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Change Password</h2>
        <form
          id="changePasswordForm"
          action="/settings/update-password"
          method="POST"
        >
          <label for="currentPassword">Current Password</label>
          <input type="password" id="currentPassword" required />

          <label for="newPassword">New Password</label>
          <input type="password" id="newPassword" required />

          <label for="confirmNewPassword">Confirm New Password</label>
          <input type="password" id="confirmNewPassword" required />

          <button type="submit">Confirm Change</button>
        </form>
      </div>
    </div>

    <!-- Modal for delete confirmation -->
    <div id="deleteAccountModal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Delete Account</h2>
        <p>
          Are you sure you want to delete your account? This action cannot be
          undone.
        </p>
        <form action="/settings/delete-account" method="POST">
          <button type="submit" class="danger-btn">
            Yes, delete my account
          </button>
          <button type="button" class="cancel-btn">Cancel</button>
        </form>
      </div>
    </div>

    <div id="addPostModal" class="modal">
      <div class="modal-content">
          <span class="close" id="closeAddPostModal">&times;</span>
          <h2>Add New Recipe</h2>
          <form id="addPostForm" action = "/main" method="POST" enctype="multipart/form-data">
              <input type="text" id="recipeTitle" name="title" placeholder="Recipe Title" required>
              <textarea id="recipeDescription" name="description" placeholder="Recipe Description" required></textarea>
              
              <select id="recipeCategory" name="category" required>
                <option value="">Select a category</option>
                <option value="breakfast">Breakfast</option>
                <option value="lunch">Lunch</option>
                <option value="dinner">Dinner</option>
                <option value="snacks">Snacks</option>
              </select>
              <label for="ingredient-search">Search for an ingredient:</label>
              <input type="text" id="ingredient-search" placeholder="Type ingredient name" autocomplete="off">
              <ul id="ingredient-suggestions"></ul> <!-- Search results suggestions -->

              <label for="quantity">Quantity (in grams):</label>
              <input type="number" id="quantity" name="quantity" placeholder="Enter quantity in grams" min="1">

              <button id="addIngredientBtn" type="submit">Add Ingredient</button>
              <div id="nutrition-info">
                <h2>Selected Ingredients</h2>
                <ul id="ingredient-list" name = "ingredient"></ul>
                <p id="total-calories">Total Calories: 0</p>
              </div>

              <input type="file" id="recipeImage" name="recipeImage" accept="image/*" required>
              <button id="postRecipeBtn" type="submit">Post Recipe</button>
          </form>
      </div>
  </div>

    <script>
      function confirmLogout(event) {
        const confirmation = confirm("Are you sure you want to log out?");
        if (!confirmation) {
            // Prevent the default action (navigation) if the user cancels
            event.preventDefault();
        }
        return confirmation; // Only returns true if user confirms
      } 

      // Get modal elements
      const changeEmailModal = document.getElementById("changeEmailModal");
      const changePasswordModal = document.getElementById(
        "changePasswordModal"
      );
      const deleteAccountModal = document.getElementById("deleteAccountModal");

      // Get buttons that open the modals
      const changeEmailBtn = document.getElementById("changeEmailBtn");
      const changePasswordBtn = document.getElementById("changePasswordBtn");
      const deleteAccountBtn = document.getElementById("deleteAccountBtn");

      // Get the <span> elements that close the modals
      const closes = document.getElementsByClassName("close");

      // When the user clicks on the button, open the modal
      changeEmailBtn.onclick = function () {
        changeEmailModal.style.display = "block";
      };

      changePasswordBtn.onclick = function () {
        changePasswordModal.style.display = "block";
      };

      deleteAccountBtn.onclick = function () {
        deleteAccountModal.style.display = "block";
    };

      // When the user clicks on <span> (x), close the modal
      for (let close of closes) {
        close.onclick = function () {
          changeEmailModal.style.display = "none";
          changePasswordModal.style.display = "none";
          deleteAccountModal.style.display = "none";
        };
      }

      // When the user clicks anywhere outside of the modal, close it
      window.onclick = function (event) {
        if (event.target == changeEmailModal) {
          changeEmailModal.style.display = "none";
        }
        if (event.target == changePasswordModal) {
          changePasswordModal.style.display = "none";
        }
        if (event.target == deleteAccountModal) {
            deleteAccountModal.style.display = "none";
      };
    }

      // Handle email change
      document.getElementById("changeEmailForm").onsubmit = async function (e) {
        e.preventDefault();
        const currentPassword = document.getElementById(
          "currentPasswordEmail"
        ).value;
        const newEmail = document.getElementById("newEmail").value;

        // Regular expression for basic email validation
        const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;

        // Check if the new email is valid
        if (!emailPattern.test(newEmail)) {
          alert("Please enter a valid email address.");
        return; // Stop form submission if email is invalid
        }
        try {
          const response = await fetch("/settings/update-email", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ currentPassword, email: newEmail }),
          });
          console.log("Response status:", response.status); // Log status
          const data = await response.json();
          console.log("Response data:", data); // Log response data

          if (response.ok) {
            document.getElementById("email").value = newEmail;
            alert("Email updated successfully!");
          } else {
            console.log("Error message from server:", data.error);
            alert(data.error || "Failed to update email.");
          }
        } catch (error) {
          console.error("Error updating email:", error);
          alert("An error occurred. Please try again.");
        }

        changeEmailModal.style.display = "none";
        this.reset();
      };

      // Handle password change
      const changePasswordForm = document.getElementById("changePasswordForm");
      changePasswordForm.onsubmit = async function (
        e
      ) {
        e.preventDefault();
        const currentPassword =
          document.getElementById("currentPassword").value;
        const newPassword = document.getElementById("newPassword").value;
        const confirmNewPassword =
          document.getElementById("confirmNewPassword").value;

        if (newPassword !== confirmNewPassword) {
          alert("New passwords do not match");
          changePasswordForm.reset();
          return;
        }

        try {
          const response = await fetch("/settings/update-password", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ currentPassword, newPassword }),
          });
          const data = await response.json();

          if (response.ok) {
            document.getElementById("password").value = "*".repeat(
              newPassword.length
            );
            alert("Password updated successfully!");
            changePasswordModal.style.display = "none";
            this.reset();
          } else {
            alert(data.error || "Failed to update password.");
            changePasswordForm.reset();
          }
        } catch (error) {
          console.error("Error updating password:", error);
          alert("An error occurred. Please try again.");
        }
      };

      // Handle account deletion
        document.querySelector("#deleteAccountModal form").onsubmit = async function (e) {
        e.preventDefault();
        if (confirm("Are you absolutely sure you want to delete your account? This action cannot be undone.")) {
            try {
            const response = await fetch("/settings/delete-account", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
            });
            const data = await response.json();

            if (response.ok) {
                alert("Your account has been successfully deleted.");
                window.location.href = "/"; // Redirect to logout or home page
            } else {
                alert(data.error || "Failed to delete account.");
            }
            } catch (error) {
            console.error("Error deleting account:", error);
            alert("An error occurred. Please try again.");
            }
        }
        deleteAccountModal.style.display = "none";
        };

        // Add event listener for the cancel button in the delete account modal
        document.querySelector("#deleteAccountModal .cancel-btn").addEventListener("click", function() {
            deleteAccountModal.style.display = "none";
        });

        // Modal functionality
    const addPostModal = document.getElementById("addPostModal");
    const addBtn = document.getElementById("addPostBtn");
    const closeAddPostModalBtn = document.getElementById("closeAddPostModal");
    const postRecipeBtn = document.getElementById('postRecipeBtn');


    addBtn.onclick = function() {
        addPostModal.style.display = "block";
    }

   
    closeAddPostModalBtn.onclick = function() {
        addPostModal.style.display = "none";
        addPostForm.reset();
        document.getElementById('ingredient-list').innerHTML = ''; // Clear all ingredients
        const resetTotalCalories = 0; // Reset total calories
        document.getElementById('total-calories').textContent = `Total Calories: ${resetTotalCalories}`;
    }
    

    window.onclick = function(event) {
        if (event.target == addPostModal) {
            addPostModal.style.display = "none";
            addPostForm.reset();
            document.getElementById('ingredient-list').innerHTML = ''; // Clear all ingredients
            const resetTotalCalories = 0; // Reset total calories
            document.getElementById('total-calories').textContent = `Total Calories: ${resetTotalCalories}`;
        }
    }

    // Handle form submission
    const addPostForm = document.getElementById('addPostForm');
    document.getElementById("postRecipeBtn").addEventListener('click', async function(e) {
        e.preventDefault();
        
        const title = document.getElementById('recipeTitle').value;
        const description = document.getElementById('recipeDescription').value;
        const category = document.getElementById('recipeCategory').value;
        const imageFile = document.getElementById('recipeImage').files[0];
        const ingredientList = document.getElementById('ingredient-list');
        const totalCaloriesElem = document.getElementById('total-calories');
        const selectedIngredients = Array.from(document.querySelectorAll('#ingredient-list li'))
        .map(li => {
            return {
                name: li.textContent.split(' - ')[0], // Get ingredient name
                quantity: parseInt(li.textContent.match(/\((\d+)g\)/)[1]), // Get quantity in grams
                calories: parseFloat(li.textContent.match(/- (\d+(\.\d+)?) kcal/)[1]) // Get calories
            };
        });

        const totalCaloriesText = totalCaloriesElem.textContent;
        const totalCalories = parseInt(totalCaloriesText.match(/\d+/)[0]);

        if (!title || !description || !category || !imageFile || selectedIngredients.length === 0) {
            alert("Please fill in all fields before submitting.");
            return; // Stop form submission
    }

        const formData = new FormData(addPostForm);
        formData.set('ingredients', JSON.stringify(selectedIngredients)); // Add serialized ingredients
        formData.set('calories', totalCalories);

        try {
          const response = await fetch("/addPost", {
              method: "POST",
              body: formData,
          });

          if (!response.ok) {
              throw new Error("Failed to add post");
          }

          const result = await response.json();
          console.log("Post added successfully", result);

          // Optional: Fetch the updated list of posts or add the new post to the DOM

          // Close the modal, reset the form, and clear ingredient history
          
          addPostModal.style.display = "none";
          addPostForm.reset();
          ingredientList.innerHTML = ''; // Clear all ingredients
          const resetTotalCalories = 0; // Reset total calories
          totalCaloriesElem.textContent = `Total Calories: ${resetTotalCalories}`;
          location.reload();
      } catch (error) {
          console.error("Error:", error);
      }
    });
    
    /*Connect to nutrinix api; Handle add ingredient button and Submit post button*/
    document.addEventListener("DOMContentLoaded", function () {
        const apiKey = "<%= nutritionixApiKey %>";
        const appId = "<%= nutritionixAppId %>";
        const apiUrl = 'https://trackapi.nutritionix.com/v2/natural/nutrients';
        const searchUrl = 'https://trackapi.nutritionix.com/v2/search/instant?query=';
        const searchInput = document.getElementById('ingredient-search');
        const suggestions = document.getElementById('ingredient-suggestions');
        const ingredientForm = document.getElementById('ingredient-form');
        const ingredientList = document.getElementById('ingredient-list');
        const totalCaloriesElem = document.getElementById('total-calories');
        const addIngredientBtn = document.getElementById('addIngredientBtn'); // Make sure this ID exists in your HTML
        let totalCalories = 0;

        // Search for ingredients as the user types
        searchInput.addEventListener('input', async function () {
            const query = searchInput.value.trim();

            if (query.length === 0) {
                suggestions.innerHTML = ''; // Clear suggestions if input is empty
                return;
            }

            try {
                const response = await fetch(`${searchUrl}${query}`, {
                    headers: {
                        'x-app-id': appId,
                        'x-app-key': apiKey
                    }
                });

                const data = await response.json();
                const foodList = data.common; // Assuming you want common food items

                // Clear previous suggestions
                suggestions.innerHTML = '';

                // Populate suggestions based on search
                foodList.forEach(food => {
                    const li = document.createElement('li');
                    li.textContent = food.food_name;
                    li.dataset.foodName = food.food_name;
                    suggestions.appendChild(li);
                });

                // Add click event to suggestion items
                suggestions.querySelectorAll('li').forEach(item => {
                    item.addEventListener('click', function () {
                        searchInput.value = item.dataset.foodName;
                        suggestions.innerHTML = ''; // Clear suggestions after selecting
                    });
                });

            } catch (error) {
                console.error('Error fetching ingredient data:', error);
            }
        });

        const ingredientInputs = [];

        // Handle form submission to add ingredient
        addIngredientBtn.addEventListener('click', async function (event) {  // Button functionality
            event.preventDefault();
            const selectedIngredient = searchInput.value.trim();
            const quantity = parseInt(document.getElementById('quantity').value);

            if (!selectedIngredient || isNaN(quantity) || quantity <= 0) {
                alert('Please enter a valid ingredient and quantity.');
                return;
            }

            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'x-app-id': appId,
                        'x-app-key': apiKey
                    },
                    body: JSON.stringify({
                        query: `${quantity} grams of ${selectedIngredient}`
                    })
                });

                const data = await response.json();
                const ingredient = data.foods[0]; // Assuming the first match is the correct ingredient


                // Display the ingredient and its calories
                const listItem = document.createElement('li');
                listItem.textContent = `${ingredient.food_name} (${quantity}g) - ${ingredient.nf_calories} kcal`;

                // Create the remove button for each ingredient
                const removeButton = document.createElement("button");
                removeButton.textContent = "Remove";
                removeButton.className = "remove-ingredient";
                removeButton.style.marginLeft = "10px";
                
                // Append the remove button to the ingredient item
                listItem.appendChild(removeButton);

                ingredientList.appendChild(listItem);
                ingredientInputs.push({ ingredient: ingredient.food_name, quantity: quantity});

                // Reset input fields
                searchInput.value = "";
                document.getElementById('quantity').value = "";

                // Event listener for the remove button
                removeButton.addEventListener("click", function() {
                    listItem.remove(); // Remove ingredient from list
                    totalCalories -= ingredient.nf_calories;
                    totalCaloriesElem.textContent = `Total Calories: ${totalCalories}`;
                });

                // Update total calories
                totalCalories += ingredient.nf_calories;
                totalCaloriesElem.textContent = `Total Calories: ${totalCalories}`;

            } catch (error) {
                console.error('Error fetching nutrition data:', error);
            }
        });
    });

    </script>
  </body>
</html>
